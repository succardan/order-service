spring:
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5433/postgres}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:Succar@123}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50
      minimum-idle: 20
      connection-timeout: 20000
      idle-timeout: 600000
      max-lifetime: 1800000
      connection-test-query: SELECT 1

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 100
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region.factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        generate_statistics: false
        connection:
          provider_disables_autocommit: true
        default_batch_fetch_size: 200

  cache:
    type: caffeine
    cache-names: orders,products,calculations,orderNumbers,orderHashes,orderStatuses
    caffeine:
      spec: maximumSize=20000,expireAfterAccess=3600s

  task:
    execution:
      pool:
        core-size: 20
        max-size: 100
        queue-capacity: 2000
        keep-alive: 60s
      thread-name-prefix: async-task-
      
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql

server:
  port: 8080
  tomcat:
    max-connections: 20000
    accept-count: 500
    connection-timeout: 20000

resilience4j:
  circuitbreaker:
    instances:
      externalServiceA:
        registerHealthIndicator: true
        slidingWindowSize: 100
        minimumNumberOfCalls: 20
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 30000
        failureRateThreshold: 50
      externalServiceB:
        registerHealthIndicator: true
        slidingWindowSize: 100
        minimumNumberOfCalls: 20
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 30000
        failureRateThreshold: 50
  ratelimiter:
    instances:
      default:
        limitForPeriod: 5000
        limitRefreshPeriod: 1s
        timeoutDuration: 1s
  bulkhead:
    instances:
      default:
        maxConcurrentCalls: 100
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

external-service:
  product-a:
    url: ${EXTERNAL_SERVICE_A_URL:http://localhost:8081/api}
    connect-timeout: ${EXTERNAL_SERVICE_A_CONNECT_TIMEOUT:2000}
    read-timeout: ${EXTERNAL_SERVICE_A_READ_TIMEOUT:5000}
  product-b:
    url: ${EXTERNAL_SERVICE_B_URL:http://localhost:8082/api}
    connect-timeout: ${EXTERNAL_SERVICE_B_CONNECT_TIMEOUT:2000}
    read-timeout: ${EXTERNAL_SERVICE_B_READ_TIMEOUT:5000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
  prometheus:
    metrics:
      export:
        enabled: true

spring.jpa.open-in-view: false
